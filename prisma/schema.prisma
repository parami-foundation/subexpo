datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ChainBlock {
  blockNum        Int              @id
  blockAt         Int
  blockHash       String           @unique
  parentHash      String
  stateRoot       String
  extrinsicsRoot  String
  logs            ChainLog[]
  extrinsics      ChainExtrinsic[]
  extrinsicsCount Int
  events          ChainEvent[]
  eventsCount     Int
  specVersion     Int
  validator       String
  finalized       Boolean          @default(false)
}

model ChainEvent {
  eventId        String          @id
  blockNum       Int
  blockAt        Int
  extrinsicId    String
  section        String
  method         String
  data           Json
  accountId      String?
  ChainBlock     ChainBlock?     @relation(fields: [blockNum], references: [blockNum])
  ChainExtrinsic ChainExtrinsic? @relation(fields: [extrinsicId], references: [extrinsicId])
  @@index([accountId])
  @@index([section, method])
}

model ChainExtrinsic {
  extrinsicId     String         @id
  blockNum        Int
  blockAt         Int
  method          String
  section         String
  args            Json
  calls           String?
  events          ChainEvent[]
  accountId       String?
  signature       String?
  nonce           Int
  extrinsicHash   String         @unique
  isSigned        Boolean
  kind            Int            @default(0) @db.SmallInt
  success         Boolean
  error           Json?
  fee             String
  tip             String
  versionInfo     Int
  extrinsicLength Int
  finalized       Boolean        @default(false)
  ChainBlock      ChainBlock?    @relation(fields: [blockNum], references: [blockNum])
  transfer        ChainTransfer?
  @@index([accountId])
  @@index([section, method])
}

model ChainLog {
  logId      String      @id
  blockNum   Int
  logType    String
  data       Json
  ChainBlock ChainBlock? @relation(fields: [blockNum], references: [blockNum])
}

model ChainVersion {
  specVersion   Int  @id
  modules       Json
  mergedModules Json
  rawData       Json
}

model ChainTransfer {
  extrinsicId    String          @id
  blockNum       Int
  blockAt        Int
  from           String
  to             String
  amount         String
  section        String
  method         String
  success        Boolean
  nonce          Int
  ChainExtrinsic ChainExtrinsic? @relation(fields: [extrinsicId], references: [extrinsicId])
  @@index([from])
  @@index([to])
  @@index([blockNum])
}
